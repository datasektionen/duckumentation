openapi: 3.0.0
servers: 
  - url: https://nallen.datasektionen.se
info:
  description: |
    This is the API spec for the backend of the nAllen application created for the reception of new students at the Computer Science and Engineering programme of the Royal Institute of Technology in Stockholm, Sweden.

    Original version written by GÃ¡bor Nagy
  version: 1.1.0
  title: nAllen API
  contact:
    email: d-sys@d.kth.se
tags:
  - name: Authentication
    description: Endpoints used for verifying accounts, logging in, verifying login status and logging out.
security: 
  - BearerAuth: []
paths:
  /authenticate:
    get:
      tags:
        - Authentication
      summary: check if login token is valid
      description: |
        By passing the login Bearer token in the Authorization header
        to this endpoint, a client can query the login status of the user.
      responses:
        '200':
          description: Submitted token is valid.
          content:
            text/plain:
              schema:
                type: integer
                description: The ID of the Person the token belongs to.
                example: 152
              
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Authentication
      security:
        - BasicAuth: []
      summary: submit credentials to acquire login token
      description: |
        By submitting the user's credentials using the Basic HTTP Auth scheme,
        the client can request a login token for future use.
      responses:
        '200':
          description: |
            The submitted credentials were accepted, and a Token resource has
            been created on the server for future request authentication.
          content:
            text/plain:
              schema:
                type: string
                format: byte
                example: U3dhZ2dlciByb2Nrcw==
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UserMustBeVerifiedError'
  /logout:
    post:
      tags:
        - Authentication
      summary: log out the currently authenticated user
      description: |
        Log out the user by having the accompanying login token revoked on the server.
      responses:
        '200':
          description: |
            The user was succesfully logged out.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /verify:
    post:
      tags:
        - Authentication
      security:
        - BasicAuth: []
      summary: submit credentials to verify account and set new password
      description: |
        By submitting the user's credentials using the Basic HTTP Auth scheme,
        the client can verify the Person that the credentials belong to, while also replacing the server-generated password to one chosen by the user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: |
            The submitted credentials were accepted, the Person has been verified, and can therefore proceed with authentication as normal.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /api/calendar:
    get:
      tags:
        - Calendar
      summary: fetch the entire calendar
      description: |
        Fetches the whole calendar, name and all.
      responses:
        '200':
          description: The calendar with its name and all events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/calendar/events:
    get:
      tags:
        - Calendar
      summary: fetch all the events in the calendar
      description: |
        Fetches all events in the calendar (that also match the optional covid group). Events that do not specify any such group(s) in their summary are always returned.
      parameters:
        - in: query
          name: covidGroup
          description: pass an optional covid group to filter for
          required: false
          schema:
            type: string
            pattern: '^G[1-4]$'
            example: G1
      responses:
        '200':
          description: All the events (that also match the possibly specified query param).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/calendar/events/{id}:
    get:
      tags:
        - Calendar
      summary: fetch the event with the given uid
      description: |
        Fetches the event with the specified uid, if it exists.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 1hnhd18nnkbro25s8q9esplbue@google.com
      responses:
        '200':
          description: The Event object with the specified uid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/news:
    get:
      tags:
        - News
      summary: fetch all published NewsItems
      description: |
        Fetches a list of all existing NewsItems.
      responses:
        '200':
          description: A list of all NewsItems.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - News
      summary: publish a new NewsItem
      description: |
        Creates a new NewsItem resource to be published to all clients.
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              required:
                - title
                - body
              properties:
                title:
                  type: string
                body:
                  type: string
                eventId:
                  type: string
                  format: uid
                  example: 1hnhd18nnkbro25s8q9esplbue@google.com
      responses:
        '200':
          description: The NewsItem was successfully created.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/news/{id}:
    get:
      tags:
        - News
      summary: fetch the NewsItem with the specified id
      description: |
        Fetches the NewsItem with the specified id, if it exists.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The NewsItem with the specified id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsItem'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - News
      summary: update the NewsItem with the specified id
      description: |
        Updates the NewsItem with the specified id, if it exists. The "Put It Back the Way It Was" principle applies to all properties that should remain unchanged, since this will literally replace the resource's values with the ones supplied in the body of this request.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - body
              properties:
                title:
                  type: string
                body:
                  type: string
                eventId:
                  type: string
                  format: uid
                  example: 1hnhd18nnkbro25s8q9esplbue@google.com
      responses:
        '200':
          description: The NewsItem was successfully updated.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - News
      summary: delete the NewsItem with the specified id
      description: |
        Deletes the NewsItem with the specified id, if it exists.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The NewsItem was successfully deleted.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  /api/nolleGroups:
    get:
      tags:
        - NolleGroups
      summary: fetch all existing NolleGroups
      description: |
        Fetches a list of all existing NolleGroups.
      responses:
        '200':
          description: A list of all NolleGroups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NolleGroup'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - NolleGroups
      summary: create a new NolleGroup
      description: |
        Creates a new NolleGroup resource.
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              required:
                - name
                - covidGroup
              properties:
                name:
                  type: string
                covidGroupId:
                  type: string
      responses:
        '200':
          description: The NolleGroup was successfully created.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: The referenced CovidGroup does not exist.
  /api/nolleGroups/{id}:
    get:
      tags:
        - NolleGroups
      summary: fetch the NolleGroup with the specified id
      description: |
        Fetches the NolleGroup with the specified id, if it exists.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The NolleGroup with the specified id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NolleGroup'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - NolleGroups
      summary: update the NolleGroup with the specified id
      description: |
        Updates the NolleGroup with the specified id, if it exists. The "Put It Back the Way It Was" principle applies to all properties that should remain unchanged, since this will literally replace the resource's values with the ones supplied in the body of this request.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - covidGroupId
              properties:
                name:
                  type: string
                covidGroupId:
                  type: string
      responses:
        '200':
          description: The NolleGroup was successfully updated.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - NolleGroups
      summary: delete the NolleGroup with the specified id
      description: |
        Deletes the NolleGroup with the specified id, if it exists.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The NolleGroup was successfully deleted.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  /api/covidGroups:
    get:
      tags:
        - CovidGroups
      summary: fetch all existing CovidGroups
      description: |
        Fetches a list of all existing CovidGroups.
      responses:
        '200':
          description: A list of all CovidGroups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CovidGroup'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/persons:
    get:
      tags:
        - Persons
      summary: fetch all existing Persons
      description: |
        Fetches a list of all existing Persons.
      parameters:
        - in: query
          name: group
          description: pass an optional nolleGroup name to filter for
          required: false
          schema:
            type: string
            example: Banelkulle
        - in: query
          name: role
          description: pass an optional role to filter for
          required: false
          schema:
            type: string
            example: Titel
      responses:
        '200':
          description: A list of all Persons.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Persons
      summary: create a new Person
      description: |
        Creates a new Person by essentially reigstering a new user account.
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: The Person resource was created, and a random password has been generated and emailed to the specified address. Delivery is not guaranteed.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/UserAlreadyExistsError'
        '503':
          description: The mail server returned a non-2xx status code, so account creation could not be fulfilled.
          headers:
            Cache-Control:
              schema:
                type: string
                example: no-store
              description: Do not cache.
              
  /api/persons/{id}:
    get:
      tags:
        - Persons
      summary: fetch the Person with the specified id
      description: |
        Fetches the Person with the specified id, if it exists.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The Person with the specified id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Persons
      summary: update the Person with the specified id
      description: |
        Updates the optional information of the Person with the specified id, if it exists. The "Put It Back the Way It Was" principle applies to all properties that should remain unchanged, since this will literally replace the resource's values with the ones supplied in the body of this request.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                kthid:
                  type: string
                phone:
                  type: string
                  format: phoneNo
      responses:
        '200':
          description: The Person was successfully updated.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/KthidInUseError'
    delete:
      tags:
        - Persons
      summary: delete the Person with the specified id
      description: |
        Deletes the Person with the specified id, if it exists.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The Person was successfully deleted.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/persons/{id}/password:
    put:
      tags:
        - Persons
      summary: update the password of the Person with the specified id
      description: |
        Hashes and saves the submitted password for the Person making the request, reaplcing the old one. 
        
        BEWARE, only the owner of the account can perform this action.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: The Person's password was successfully updated.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Persons
      summary: reset the password of the Person with the specified id
      description: |
        Resets the password of the specified Person by generating a new random password, replacing the old one, and sending it to the email address of the Person. This also marks the Person as 'unverified', just like upon initial registration. Unlike the PUT operation to this resource, this can only be performed by an Admin (Titel as well).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The password of the Person was successfully reset.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '503':
          description: The mail server returned a non-2xx status code, so account creation could not be fulfilled.
          headers:
            Cache-Control:
              schema:
                type: string
                example: no-store
              description: Do not cache.
  /api/persons/{id}/role:
    put:
      tags:
        - Persons
      summary: update the role of the Person with the specified id
      description: |
        Assigns the Person the specified role.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: integer
      responses:
        '200':
          description: The Person's role was successfully updated.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/persons/{id}/group:
    put:
      tags:
        - Persons
      summary: update the NolleGroup of the Person with the specified id
      description: |
        Assigns the Person to the specified NolleGroup.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - nolleGroupId
              properties:
                nolleGorupId:
                  type: integer
      responses:
        '200':
          description: The Person's NolleGroup was successfully updated.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  /api/roles:
    get:
      tags:
        - Roles
      summary: fetch all existing Roles
      description: |
        Fetches a list of all existing Roles.
      responses:
        '200':
          description: A list of all Roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    UserMustBeVerifiedError:
      description: The Person being authenticated is unverified and must first verify their account.
      headers:
        Location:
          schema:
            type: string
            format: url
            example: /verify
    BadRequestError:
      description: The request was somehow malformed.
    UnauthorizedError:
      description: Authentication information is missing or invalid.
      headers:
        WWW_Authenticate:
          schema:
            type: string
    ForbiddenError:
      description: The user lacks sufficient privileges to perform this action.
    NotFoundError:
      description: The requested resource could not be found.
    UserAlreadyExistsError:
      description: Registration failed, because the user already exists.
    KthidInUseError:
      description: Update failed, because the proposed kth-id is already in use.
  schemas:
    Calendar:
      type: object
      required:
        - name
        - events
      properties:
        name:
          type: string
          example: nAllen Dummy
        events:
          type: object
          description: |
            A key-value mapping of the Event's uid to the Event object.
          additionalProperties:
            $ref: '#/components/schemas/Event'
    Event:
      type: object
      required:
        - uid
        - start
        - end
        - location
        - summary
        - description
        - covidGroups
      properties:
        uid:
          type: string
          format: uid
          example: 1hnhd18nnkbro25s8q9esplbue@google.com
        start:
          type: string
          format: zoned-date-time
        end:
          type: string
          format: zoned-date-time
        location:
          type: string
        summary:
          type: string
          example: G1 G2 MatteÃ¶vning
        description:
          type: string
          example: Ingen akkvart!
        covidGroups:
          type: array
          items:
            type: string
          example: [G1,G2]
    Person:
      type: object
      required:
        - id
        - email
        - password
        - verified
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        kthid:
          type: string
        phone:
          type: string
          format: phoneNo
        password:
          type: string
        verified:
          type: boolean
        role:
          $ref: '#/components/schemas/Role'
        nolleGroup:
          $ref: '#/components/schemas/NolleGroup'
    Role:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string
    NolleGroup:
      type: object
      required:
        - id
        - name
        - covidGroup
      properties:
        id:
          type: integer
        name:
          type: string
        covidGroup:
          $ref: '#/components/schemas/CovidGroup'
    CovidGroup:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string
    NewsItem:
      type: object
      required:
        - id
        - title
        - body
        - created
        - author
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        created:
          type: integer
          format: timestamp-instant
        updated:
          type: integer
          format: timestamp-instant
        author:
          $ref: '#/components/schemas/Person'
        eventId:
          type: string
          format: uid
          example: 1hnhd18nnkbro25s8q9esplbue@google.com